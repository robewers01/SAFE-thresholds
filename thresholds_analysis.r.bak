
#Import functions
	setwd("C:/Users/robew/OneDrive - Imperial College London/work/papers/in prep/ewers et al - SAFE meta-analysis/SAFE-thresholds/")
	setwd("C:/Users/rewers/OneDrive - Imperial College London/work/papers/in prep/ewers et al - SAFE meta-analysis/SAFE-thresholds/")
	source("thresholds_functions.r")

	require(ape)
	require(betareg)
	require(lmtest)
	require(safedata)
	set_safe_dir("C:/Users/rewers/OneDrive - Imperial College London/work/SAFE project - private/safedata",update = FALSE)

#Import data
	thresh.data <- readRDS("data/threshold_taxa_data.rds")	#Site x species matrix for each dataset, containing only taxa that are duplicated across >1 dataset
	lidar.data <- readRDS("data/lidar_percent.rds")			#Lidar data for all sites in full dataset
	func.groups <- readRDS('data/functional_groups.rds')	#Functional groups
		func.groups$BodyMass <- log10(func.groups$BodyMass)		#log-transform body mass
#	bayes_results <- readRDS("data/bayes.rds")[[1]]			#Results from Bayesian slopes analysis (Replicability analysis)
	tr <- read.tree("data/species.nwk")			#Imported phylogeny from TimeTree (www.timetree.org)
	taxa <- readRDS('data/taxon_table.rds')					#Full list of all taxa
	map <- read.table('data/species_families_order_map.txt', sep = '-')	#Identified one family and example species per order that exists on TimeTree.org
	
#Fit models and calculate summaries
#	flat_data <- full.data(full_data = thresh.data, lidar = lidar.data)		#NOT USED!!
#		saveRDS(flat_data, 'data/flat_data.rds')
#	fitted_thresh <- fit.models(full_data = thresh.data, lidar = lidar.data, min.observs = 5,
#		predictor = c('agb250', 'agb500', 'agb1000', 'agb2000', 'agb4000'))
#		saveRDS(fitted_thresh, 'results/fitted_thresh.rds')
#	fitted_func <- fit.models(full_data = thresh.data, func_data = func.groups, lidar = lidar.data,
#		predictor = c('agb250', 'agb500', 'agb1000', 'agb2000', 'agb4000'), min.observs = 5)
#	saveRDS(fitted_func, 'results/fitted_func.rds')
#	turn_points <- turns(fitted_mod = fitted_thresh)
#		saveRDS(turn_points, 'results/turn_points.rds')
#	func_points <- turns(fitted_mod = fitted_func)
#		saveRDS(func_points, 'results/func_points.rds')
#	thresh_CI <- boot.thresholds(turn_points, func_points, reps = 100)
#		saveRDS(thresh_CI, 'results/threshold_CI.rds')



#Read in pre-calculated versions
	flat_data <- readRDS('data/flat_data.rds')
	fitted_thresh <- readRDS('results/fitted_thresh.rds')
	fitted_func <- readRDS('results/fitted_func.rds')
	turn_points <- readRDS('results/turn_points.rds')
	func_points <- readRDS('results/func_points.rds')
	thresh_CI <- readRDS('results/threshold_CI.rds')

#Calculate summaries and derived data
	taxa_cats <- assign.taxon(dataset = fitted_thresh[!is.na(fitted_thresh$modtype), ], taxon_table = taxa)
	turn_points <- assign.taxon(dataset = turn_points, taxon_table = taxa)
	phylo <- arrange.phylo(timetree = tr, raw_data = thresh.data, taxa_safe = taxa,
		tt_map = map, coefs = fitted_thresh, palette_col = NA)
	taxaXdata <- taxon.dataset(thresh.data)


#Abstract
	#Number of taxa modelled
		nrow(turn_points$dataset)
	#Number of orders containing taxa that were analysed
		sum(!is.na(phylo$numbers3$propTax))
	#Number of functional groups
		nrow(fitted_func)
	#Conservation thresholds
		thresh <- estimate.thresholds(turn_points, func_points)
		mean(thresh$proactive)
		mean(thresh$reactive)
	
#Summary data
	#Number of surveys
		length(thresh.data)
	#Number of taxa
		nrow(fitted_thresh)		#all taxa
	#Number of functional groups
		nrow(fitted_func)	
	#Number modelled
		sum(!is.na(fitted_thresh$modtype))	#Taxa
		nrow(fitted_func)					#Functional groups
	#Survey information
		sum(rowSums(!is.na(taxaXdata)) > 1)				#Number of taxa in >1 survey
		sum(rowSums(!is.na(taxaXdata)) > 1) / nrow(taxaXdata)	#As a proportion
		visits <- repeat.visits(thresh.data)
		sum(visits$mean.visits > 1)/nrow(visits)	#Number surveys with >1 visit, as proportion
	#Higher order taxa
		sum(!is.na(phylo$numbers3$propTax))		#Number of orders (based on TimeTree.org)
		length(unique(taxa_cats$matched.taxa$genus))		#Number of genera
		summary(factor(taxa_cats$dataset$TaxonType))		#Taxonomic categories
		length(which(taxa_cats$dataset$TaxonType == 'Arachnid' | taxa_cats$dataset$TaxonType == 'Invertebrate' | taxa_cats$dataset$TaxonType == 'Insect'))	#Number of invertebrates
		length(which(taxa_cats$matched.taxa$order == 'Coleoptera'))		#Number of beetles
		length(which(taxa_cats$matched.taxa$order == 'Lepidoptera'))	#Number of leps
		length(which(taxa_cats$matched.taxa$family == 'Formicidae'))	#Number of ants
		length(which(taxa_cats$dataset$TaxonType == 'Arachnid'))		#Number of spiders
	#Functional groups
		minsize <- print(func.groups[which(func.groups$BodyMass == min(func.groups$BodyMass, na.rm = TRUE)), c('taxon_name', 'BodyMass')])
		maxsize <- print(func.groups[which(func.groups$BodyMass == max(func.groups$BodyMass, na.rm = TRUE)), c('taxon_name', 'BodyMass')])
		maxsize$BodyMass[1] - minsize$BodyMass[1]		#Orders of magnitude in body size
		func.summary(func_groups = func.groups)

	#Number of taxa instantly impacted
		sum(turn_points$dataset$turn.point == 0, na.rm = TRUE)
		sum(turn_points$dataset$turn.point == 0, na.rm = TRUE) / nrow(turn_points$dataset)
	#Number of functional groups instantly impacted
		sum(func_points$turn.point == 0, na.rm = TRUE)
		sum(func_points$turn.point == 0, na.rm = TRUE) / nrow(func_points)
	#Number negative vs positive responses
		sum(turn_points$dataset$slope < 0 & turn_points$dataset$pval < 0.05)	#taxa - number responding negatively
		sum(func_points$slope < 0 & func_points$pval < 0.05)	# funcs - number responding negatively
		sum(turn_points$dataset$slope > 0 & turn_points$dataset$pval < 0.05)	#taxa - number responding positively
		sum(func_points$slope > 0 & func_points$pval < 0.05)	#funcs - number responding positively
	#Impact on primary forest species
		primes <- primary.species(thresh_data = thresh.data, lidar_data = lidar.data, primary_cutoff = 95)	
		length(primes)		#Number of primary forest taxa
		prime.turns <- turn_points$dataset[match(primes, turn_points$dataset$taxon), ]	#Turning points for primary forest taxa only
		sum(prime.turns$slope > 0 & prime.turns$pval < 0.05, na.rm = TRUE) / nrow(prime.turns)	#proportion of primary forest taxa responding positively
		sum(prime.turns$slope > 0 & prime.turns$pval < 0.05, na.rm = TRUE)
		sum(prime.turns$slope < 0 & prime.turns$pval < 0.05, na.rm = TRUE) / nrow(prime.turns)	#proportion of primary forest taxa responding negatively
		sum(prime.turns$slope < 0 & prime.turns$pval < 0.05, na.rm = TRUE)
		
#Figure 1 caption
	#Number of taxa
		nrow(turn_points$dataset)
	#Number of functional groups
		nrow(fitted_func)	

#Ecological thresholds
	thresh
	mean(thresh$proactive)
	thresh_CI
	mean(thresh$reactive)

#Vulnerability
	#Number of orders
		sum(!is.na(phylo$numbers3$propTax))
	#Number of orders with impacted taxa
		func <- function(x) sum(!is.na(x))/length(x)
		reps <- by(turn_points$dataset$turn.point, factor(turn_points$dataset$Order), FUN = func)
		sum(reps > 0)				#Number of orders containing impacted taxa
		sum(reps > 0)/length(reps)	#As a proportion
	#Number of functional groups impacted
		fs <- by(func_points$turn.point, factor(func_points$taxon), FUN = func)
		sum(fs > 0)				#Number of impacted functional groups
		sum(fs > 0)/length(fs)	#As a proportion
	#Proportion taxa with turning points
		by(turn_points$dataset$turn.point, factor(turn_points$dataset$TaxonType), FUN = func)	#Proportion taxa with turning points
		by(turn_points$dataset$turn.point, factor(turn_points$dataset$TaxonType), FUN = mean, na.rm = TRUE) 	#Mean turning point
	#Sensitivity vs susceptibility correlations
		cor.test(as.numeric(resil_func$susc$prop_imp), as.numeric(resil_func$sens$mean.turn))
		func <- function(x) sum(!is.na(x))/length(x)
		prop_imp <- by(turn_points$dataset$turn.point, factor(turn_points$dataset$TaxonType), FUN = func)	#Proportion taxa with turning points
		mean.turn <- 1 - by(turn_points$dataset$turn.point, turn_points$dataset$TaxonType, FUN = mean, na.rm = TRUE) / 100	#Mean turning point
		cor.test(prop_imp, mean.turn)
	#Functional vulnerability
		resil_func <- resil.func(func_groups = func.groups, func_points = func_points, turns = turn_points$dataset)
		resil_func$funcs[order(resil_func$funcs$resilience), c(17, 20,25)]	#Functional groups ordered from least to most resilient
		sort(by(resil_func$funcs$resilience, resil_func$funcs$category, mean))	#Mean resilience per functional category
		lrtest(betareg(resilience ~ category, data = resil_func$funcs))

#Functional composition - example taxa
	#Plants - low photosynthetic capacity
	find.egs(Function = 'PlantPhotoCap_Categorised', function_qual = 'low', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Habitat strata generalists
	find.egs(Function = 'StrataGeneralism_Categorised', function_qual = 'high', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Dietary generalists
	find.egs(Function = 'DietGeneralism_Categorised', function_qual = 'high', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Trophic specialists
	find.egs(Function = 'TrophicGeneralism_Categorised', function_qual = 'low', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Body size - large amphibians
	find.egs(Function = 'BodyMass_Amphibian_Categorised', function_qual = 'high', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Body size - small fish
	find.egs(Function = 'BodyMass_Fish_Categorised', function_qual = 'low', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Arboreal mammals
	find.egs(Function = 'StraArb_Mammal', function_qual = 'arboreal', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Terrestrial birds
	find.egs(Function = 'StraTerr_Bird', function_qual = 'terrestrial', taxtype = NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong
	#Subterranean mammals
	find.egs(Function = 'StraSub_Mammal', function_qual = 'subterranean', taxtype =NA, 
		turn_points = turn_points, func_points = func_points, func_groups = func.groups)$strong


#Methods
	#Taxon x survey combinations
		sum(!is.na(taxaXdata))
	#Number of data sources
		data_sum <- summarise.data(thresh.data)
		nrow(data_sum)
	#Number of surveys
		sum(data_sum$surveys)
	#Total number of taxa in all surveys combined
		nrow(taxaXdata)
	#Number of taxa identified to species
		used_taxa <- taxa[match(rownames(taxaXdata), taxa$taxon_name), ]
		sum(used_taxa$taxon_level == 'species', na.rm = TRUE)
	#Number identified to morphospecies
		sum(used_taxa$taxon_level == 'morphospecies', na.rm = TRUE)
	#Number of taxa modelled
		nrow(fitted_thresh)
	#Number taxa represented in >1 survey
		modelled <- taxaXdata[match(fitted_thresh$taxon, rownames(taxaXdata)),]	#Subset to just modelled taxa
		sum(apply(X = modelled, MARGIN = 1, FUN = function(x) sum(!is.na(x))) > 1)	#Number of taxa in multiple surveys


#Fig S1 caption
	#Number of orders in all surveys combined
		length(phylo$tr$tip.label)
	#Number of orders containing taxa that were analysed
		sum(!is.na(phylo$numbers3$propTax))


#Methods
	#Number taxa analysed with GLMM
		summary(factor(fitted_thresh$modtype))
		summary(factor(fitted_thresh$modtype)) / (nrow(fitted_thresh) - sum(is.na(fitted_thresh$modtype)))
	#Number functional groups analysed with GLMM
		summary(factor(fitted_func$modtype))
		summary(factor(fitted_func$modtype)) / (nrow(fitted_func) - sum(is.na(fitted_func$modtype)))
	
#Table S1
	summarise.data(thresh.data)
	#write.csv(summarise.data(thresh.data), 'figures/tableS1.csv')
	
#Table S2
	sort.funcs(func_groups = func.groups)
	#write.csv(sort.funcs(func_groups = func.groups), 'figures/tableS2.csv')
	
