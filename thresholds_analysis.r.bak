
#Import functions
	setwd("C:/Users/robew/OneDrive - Imperial College London/work/papers/in prep/ewers et al - SAFE meta-analysis/SAFE-thresholds/")
	setwd("C:/Users/rewers/OneDrive - Imperial College London/work/papers/in prep/ewers et al - SAFE meta-analysis/SAFE-thresholds/")
	source("thresholds_functions.r")

#	require(safedata)
#	set_safe_dir("C:/Users/rewers/OneDrive - Imperial College London/work/SAFE project - private/safedata",update = FALSE)

#Import data
	thresh.data <- readRDS("data/threshold_taxa_data.rds")	#Site x species matrix for each dataset, containing only taxa that are duplicated across >1 dataset
	lidar.data <- readRDS("data/lidar_percent.rds")			#Lidar data for all sites in full dataset
	func.groups <- readRDS('data/functional_groups.rds')			#Functional groups
	
#Fit models and calculate summaries
#	fitted_thresh <- fit.models(full_data = thresh.data, lidar = lidar.data, min.observs = 5,
#		predictor = c('agb250', 'agb500', 'agb1000', 'agb2000', 'agb4000'))
#		saveRDS(fitted_thresh, 'results/fitted_thresh.rds')
#	fitted_func <- fit.models(full_data = thresh.data, func_data = func.groups, lidar = lidar.data,
#		predictor = c('agb250', 'agb500', 'agb1000', 'agb2000', 'agb4000'), min.observs = 5)
#	saveRDS(fitted_func, 'results/fitted_func.rds')
#	turn_points <- turns(fitted_mod = fitted_thresh)
#		saveRDS(turn_points, 'results/turn_points.rds')
#	func_points <- turns(fitted_mod = fitted_func)
#		saveRDS(func_points, 'results/func_points.rds')
#	break_points <- func.thresholds(func_groups = func.groups, turns_taxa = turn_points)
#		saveRDS(break_points, 'results/break_points.rds')

#Read in pre-calculated versions
	fitted_thresh <- readRDS('results/fitted_thresh.rds')
		fitted_thresh <- fitted_thresh[!is.na(fitted_thresh$num.occs), ]	#Remove taxa that weren't found for analyses
	fitted_func <- readRDS('results/fitted_func.rds')
		fitted_func <- fitted_func[!is.na(fitted_func$num.occs), ]	#Remove taxa that weren't found for analyses
	turn_points <- readRDS('results/turn_points.rds')
	func_points <- readRDS('results/func_points.rds')
	break_points <- readRDS('results/break_points.rds')
	func_points <- readRDS('results/func_points.rds')

	taxa_cats <- assign.taxon(dataset = fitted_thresh[fitted_thresh$num.occs >= 5, ])

#Exclude taxonomic groups from functional groups
	taxongroupsA <- c(grep('order', fitted_func$taxon), grep('family', fitted_func$taxon), grep('genus', fitted_func$taxon))
	fitted_func <- fitted_func[-taxongroupsA,]
	taxongroupsB <- c(grep('order', func_points$taxon), grep('family', func_points$taxon), grep('genus', func_points$taxon))
	func_points <- func_points[-taxongroupsB,]


#Summary data
	#Number of surveys
		length(thresh.data)
	#Number of taxa
		nrow(fitted_thresh)		#all taxa
		sum(as.numeric(fitted_thresh$num.occs) >= 5)	#taxa with >= minimum number of occurrences
	#Higher order taxa
		length(unique(taxa_cats$matched.taxa$order))		#Number of orders
		length(unique(taxa_cats$matched.taxa$genus))		#Number of genera
		summary(factor(taxa_cats$dataset$TaxonType))		#Taxonomic categories
		length(which(taxa_cats$matched.taxa$order == 'Coleoptera'))		#Number of beetles
		length(which(taxa_cats$matched.taxa$order == 'Lepidoptera'))	#Number of leps
		length(which(taxa_cats$matched.taxa$family == 'Formicidae'))	#Number of ants
		

#Turnpoints
	#Number of taxa instantly impacted
		sum(turn_points$turn.point == 0, na.rm = TRUE)
		sum(turn_points$turn.point == 0, na.rm = TRUE) / nrow(turn_points)
	#Number of taxa with significant turnpoints
		sum(!is.na(turn_points$turn.point))
		sum(!is.na(turn_points$turn.point)) / nrow(turn_points)
	#Number negative responses
		sum(turn_points$slope[turn_points$pval < 0.05] < 0)		#are taxa responding negatively?
		sum(turn_points$slope[turn_points$pval < 0.05] < 0)	 / sum(as.numeric(turn_points$pval) < 0.05)
		



#Functional groups
groups <- names(func.groups)
taxongroups <- c(grep('order', groups), grep('family', groups), grep('genus', groups))
groups <- groups[-taxongroups]

#To split by taxontype
TaxonType
BodyMass
Movement - vertebrate vs invertebrate
Strata - understory, aquatic, aerial, arborial, terrestrial, subterranean

#To be agnostic to taxontype
IUCNthreat
Development
Physiology
Sociality
StraLifeHist
Strata generalism
Trophic - carnivore, herbivore, producer, saprovore, parasitoid, parasite
Trophic generalism
Diet - x21 categories
Diet generalism
Plants - wood density, ruderal, stress, competitive, photsynthetic capacity



#Function to pull out relevant functional groups for analysis
extract.func <- function(func_groups){
	#func_groups = functional traits data

	#Exclude numeric traits (these have all been categorised and are captured in other fiels)
	num.col <- NULL
	for(k in 1:ncol(func_groups)){
		num.col <- c(num.col, is.numeric(func_groups[, k]))
		}
	groups <- groups.list[!num.col]
	#Exclude unnecessary taxonomic information
	groups <- groups[-c(1:12,15)]
	
	to.retain <- NULL	#Vector to store indices to desired groups
	func.categ <- NULL	#Vector to record broad categories of groups
	#Body mass by taxon
	to.retain <- c(to.retain, grep('BodyMass', groups))
	func.categ <- rep('Body mass', length(to.retain))
	#Movement by taxon
	movement <- grep('Movement', groups)
	to.retain <- c(to.retain, movement)
	func.categ <- c(func.categ, rep('Movement', length(movement)))
	#Strata types by taxon
	strata <- grep('Stra', groups)
		#Exclusions
		exclusions <- NULL
		#Exclude life history variation
		exclusions <- c(exclusions, grep('StraLifeHist', groups))
		#Exclude generalism index
		exclusions <- c(exclusions, grep('StrataGeneralism', groups))
	to.retain <- c(to.retain, strata[is.na(match(strata, exclusions))])
	func.categ <- c(func.categ, rep('Habitat strata', length(strata[is.na(match(strata, exclusions))])))
	#Strata life history variation
	slh <- grep('StraLifeHist', groups)
	to.retain <- c(to.retain, slh[-grep('_', groups[slh])])
	func.categ <- c(func.categ, rep('Habitat strata', length(slh[-grep('_', groups[slh])])))
	#Strata generalism
	sg <- grep('StrataGeneralism', groups)
	to.retain <- c(to.retain, sg[1])
	func.categ <- c(func.categ, rep('Habitat strata', length(sg[1])))
	#IUCNthreat and RedList
	iucn <- grep('IUCN', groups)
	to.retain <- c(to.retain, iucn[-grep('_', groups[iucn])])
	func.categ <- c(func.categ, rep('Red List status', length(iucn[-grep('_', groups[iucn])])))
	#Development
	dev <- grep('Development', groups)
	to.retain <- c(to.retain, dev[-grep('_', groups[dev])])
	func.categ <- c(func.categ, rep('Development', length(dev[-grep('_', groups[dev])])))
	#Physiology
	phys <- grep('Physiology', groups)
	to.retain <- c(to.retain, phys[-grep('_', groups[phys])])
	func.categ <- c(func.categ, rep('Physiology', length(phys[-grep('_', groups[phys])])))
	#Sociality
	social <- grep('Sociality', groups)
	to.retain <- c(to.retain, social[-grep('_', groups[social])])
	func.categ <- c(func.categ, rep('Sociality', length(social[-grep('_', groups[social])])))
	#Trophic
	trophic <- grep('Troph', groups)
	to.retain <- c(to.retain, trophic[-grep('_', groups[trophic])])
	func.categ <- c(func.categ, rep('Trophic', length(trophic[-grep('_', groups[trophic])])))
	#Trophic generalism
	tg <- grep('TrophicGen', groups)
	to.retain <- c(to.retain, tg[1])
	func.categ <- c(func.categ, rep('Trophic', length(tg[1])))
	#Diet
	diet <- grep('Diet', groups)
	to.retain <- c(to.retain, diet[-grep('_', groups[diet])])
	func.categ <- c(func.categ, rep('Diet', length(diet[-grep('_', groups[diet])])))
	#Diet generalism
	dg <- grep('DietGen', groups)
	to.retain <- c(to.retain, dg[1])
	func.categ <- c(func.categ, rep('Trophic', length(dg[1])))
	#Plants
	plant <- grep('Plant', groups)
	to.retain <- c(to.retain, plant[-grep('_plant', groups[plant])])
	func.categ <- c(func.categ, rep('Plant', length(plant[-grep('_plant', groups[plant])])))
	
	out <- data.frame(group = groups[to.retain], category = func.categ)
	
	return(out)
	}









